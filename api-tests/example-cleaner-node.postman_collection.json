{
	"info": {
		"_postman_id": "94334d58-550b-4ac1-9b50-461f63ec0a1b",
		"name": "example-cleaner-node",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "fibonacci",
			"item": [
				{
					"name": "GET /fibonacci/0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", () => {\r",
									"    pm.expect(pm.response.json()).to.eql({\r",
									"        fibonacciNumber: 0,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/fibonacci/0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"fibonacci",
								"0"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /fibonacci/1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", () => {\r",
									"    pm.expect(pm.response.json()).to.eql({\r",
									"        fibonacciNumber: 1,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/fibonacci/1",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"fibonacci",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /fibonacci/9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify response body\", () => {\r",
									"    pm.expect(pm.response.json()).to.eql({\r",
									"        fibonacciNumber: 34,\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/fibonacci/9",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"fibonacci",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /fibonacci/invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/fibonacci/invalid",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"fibonacci",
								"invalid"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /fibonacci/0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/fibonacci/0",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"fibonacci",
								"0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "others",
			"item": [
				{
					"name": "unknown endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code\", () => {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BASE_URL}}/unknown",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"unknown"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}